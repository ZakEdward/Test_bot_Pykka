import unittest
from game import Game  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å Game –∏–∑ —Ñ–∞–π–ª–∞ game.py
from player import Player  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å Player –∏–∑ —Ñ–∞–π–ª–∞ player.py

class TestGameLogic(unittest.TestCase):
    def test_calculate_winner(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.
        """
        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤—ã–±–æ—Ä–∞–º–∏
        player1 = Player(player_id=1, name="–ò–≥—Ä–æ–∫ 1", chat_id=1)
        player2 = Player(player_id=2, name="–ò–≥—Ä–æ–∫ 2", chat_id=2)

        # –°–ª—É—á–∞–π 1: –ò–≥—Ä–æ–∫ 1 –ø–æ–±–µ–∂–¥–∞–µ—Ç
        player1.choice = "–∫–∞–º–µ–Ω—å"
        player2.choice = "–Ω–æ–∂–Ω–∏—Ü—ã"
        result = Game.calculate_winner(player1, player2)
        self.assertEqual(result, "üéâ –ü–æ–±–µ–¥–∏–ª –ò–≥—Ä–æ–∫ 1!")

        # –°–ª—É—á–∞–π 2: –ò–≥—Ä–æ–∫ 2 –ø–æ–±–µ–∂–¥–∞–µ—Ç
        player1.choice = "–Ω–æ–∂–Ω–∏—Ü—ã"
        player2.choice = "–∫–∞–º–µ–Ω—å"
        result = Game.calculate_winner(player1, player2)
        self.assertEqual(result, "üéâ –ü–æ–±–µ–¥–∏–ª –ò–≥—Ä–æ–∫ 2!")

        # –°–ª—É—á–∞–π 3: –ù–∏—á—å—è
        player1.choice = "–±—É–º–∞–≥–∞"
        player2.choice = "–±—É–º–∞–≥–∞"
        result = Game.calculate_winner(player1, player2)
        self.assertEqual(result, "–ù–∏—á—å—è!")

    def test_invalid_choices(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤—ã–±–æ—Ä–æ–≤ –∏–≥—Ä–æ–∫–æ–≤.
        """
        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
        player1 = Player(player_id=1, name="–ò–≥—Ä–æ–∫ 1", chat_id=1)
        player2 = Player(player_id=2, name="–ò–≥—Ä–æ–∫ 2", chat_id=2)

        # –°–ª—É—á–∞–π 1: –í—ã–±–æ—Ä –æ–¥–Ω–æ–≥–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ —Ä–∞–≤–µ–Ω None
        player1.choice = "–∫–∞–º–µ–Ω—å"
        player2.choice = None
        result = Game.calculate_winner(player1, player2)
        self.assertEqual(result, "–û—à–∏–±–∫–∞: –í—ã–±–æ—Ä –æ–¥–Ω–æ–≥–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

        # –°–ª—É—á–∞–π 2: –û–±–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–≤–Ω—ã None
        player1.choice = None
        player2.choice = None
        result = Game.calculate_winner(player1, player2)
        self.assertEqual(result, "–û—à–∏–±–∫–∞: –í—ã–±–æ—Ä –æ–¥–Ω–æ–≥–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    def test_all_combinations(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –≤—ã–±–æ—Ä–æ–≤ –∏–≥—Ä–æ–∫–æ–≤.
        """
        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
        player1 = Player(player_id=1, name="–ò–≥—Ä–æ–∫ 1", chat_id=1)
        player2 = Player(player_id=2, name="–ò–≥—Ä–æ–∫ 2", chat_id=2)

        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –≤—ã–±–æ—Ä–æ–≤
        choices = ["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        for p1_choice in choices:
            for p2_choice in choices:
                player1.choice = p1_choice
                player2.choice = p2_choice

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if p1_choice == p2_choice:
                    expected_result = "–ù–∏—á—å—è!"
                elif (p1_choice == "–∫–∞–º–µ–Ω—å" and p2_choice == "–Ω–æ–∂–Ω–∏—Ü—ã") or \
                     (p1_choice == "–Ω–æ–∂–Ω–∏—Ü—ã" and p2_choice == "–±—É–º–∞–≥–∞") or \
                     (p1_choice == "–±—É–º–∞–≥–∞" and p2_choice == "–∫–∞–º–µ–Ω—å"):
                    expected_result = "üéâ –ü–æ–±–µ–¥–∏–ª –ò–≥—Ä–æ–∫ 1!"
                else:
                    expected_result = "üéâ –ü–æ–±–µ–¥–∏–ª –ò–≥—Ä–æ–∫ 2!"

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result = Game.calculate_winner(player1, player2)
                self.assertEqual(result, expected_result)


if __name__ == '__main__':
    unittest.main()